#! /bin/bash

set -x

WORKDIR=$SNAP_DATA/collectd
CONF=$WORKDIR/collectd.conf
LOGFILE=$WORKDIR/collectd.log
PIDFILE=$WORKDIR/collectd.pid
BIN=$SNAP/usr/sbin/collectd
BASEDIR=$SNAP_COMMON/collectd
RRDDIR_DISK="$BASEDIR/rrd"
RRDDIR_RAM=/tmp/rrd
DISKFILE=$SNAP_DATA/disk.conf
DISK=
MOUNTPOINT=

LC_ALL=C.UTF-8
LANG=C.UTF-8

trap 'rrd-op backup' EXIT

[ ! -d "$BASEDIR" ] && mkdir -p "$BASEDIR"
[ ! -d "$WORKDIR" ] && mkdir -p "$WORKDIR"

PERIOD_BACKUP=$(snapctl get collectd.rrd-backup-period)
PERIOD_BACKUP=${PERIOD_BACKUP:-0}
if [ "$PERIOD_BACKUP" -ne 0 ]; then
	# Restore RRD files from disk
	rrd-op restore
	RRDDIR="$RRDDIR_RAM"
else
	# Move files on RAM back to disk
	if [ -d "$RRDDIR_RAM" ]; then
		rrd-op backup
		rm -rf "$RRDDIR_RAM"
	fi
	RRDDIR="$RRDDIR_DISK"
fi

# Migration
[ -f "$SNAP_DATA/collectd.conf" ] && rm "$SNAP_DATA/collectd.conf"
[ -f "$SNAP_DATA/collectd.log" ] && mv "$SNAP_DATA/collectd.log" "$LOGFILE"
[ -f "$SNAP_DATA/collectd.pid" ] && rm "$SNAP_DATA/collectd.pid"

if [ -f "$SNAP_COMMON/URL.conf" ]; then
	URL_1090="$(head -n 1 "$SNAP_COMMON/URL.conf" | tr -d '\n')"
else
	URL_1090="http://localhost:8080/dump1090"
fi
URL_978="http://localhost:8080/skyaware978"

RRD_WRITES_PER_SECOND=$(snapctl get collectd.rrd-writes-per-seoncd)
RRD_WRITES_PER_SECOND=${RRD_WRITES_PER_SECOND:-50}
RRD_CACHE_TIMEOUT=$(snapctl get collectd.rrd-cache-timeout)
RRD_CACHE_TIMEOUT=${RRD_CACHE_TIMEOUT:-300}
RRD_CACHE_FLUSH=$(snapctl get collectd.rrd-cache-flush)
RRD_CACHE_FLUSH=${RRD_CACHE_FLUSH:-$((RRD_CACHE_TIMEOUT*10))}
RRD_RANDOM_TIMEOUT=$(snapctl get collectd.rrd-random-timeout)
RRD_RANDOM_TIMEOUT=${RRD_RANDOM_TIMEOUT:-0}

# always update the disk.conf
## FIXME: what is the best way to determine
##  1. core or classic
##  2. main storage
if [ "$(grep -cE "\/dev\/loop[0-9]+ \/ squashfs" /etc/mtab)" -eq 1 ]; then
	# Ubuntu Core
	BOOTDEV="$(sed -n 's/\ \/home .*//p' < /etc/mtab | cut -c 6-)"
	if [ "$(df | grep -c " \/writable")" -eq 1 ]; then
		# UC16
		MOUNTPOINT="/writable"
	else
		# UC18
		MOUNTPOINT="/var/lib/snapd/hostfs/writable"
	fi
else
	# Ubuntu Classic
	BOOTDEV="$(sed -n 's/\ \/ .*//p' < /etc/mtab | cut -c 6-)"
	MOUNTPOINT="/"
fi
# shellcheck disable=SC2001
DISK=$(echo "$BOOTDEV" | \
		sed 's:\(\(cciss\|ida\|rs\)/c[0-9]d[0-9][0-9]*\|mmcblk[0-9]\|nvme[0-9][0-9]*n[0-9][0-9]*\|\(ad\|ada\|da\|vtbd\|xbd\)[0-9]\+\|[hms]d[0-9]\+\|[a-z]\+\).*:\1:')
echo "Set '$DISK' as the boot device and '$MOUNTPOINT' as the main partition"
echo -e "DISK=\"$DISK\"\nMOUNTPOINT=\"$MOUNTPOINT\"" > "$DISKFILE"

cat << EOF > "$CONF"
# Config file for collectd(1).
##############################################################################
# Global                                                                     #
##############################################################################
Hostname "localhost"
BaseDir "$BASEDIR"
PIDFile "$PIDFILE"
PluginDir "$SNAP/usr/lib/collectd"
#----------------------------------------------------------------------------#
# Added types for dump1090.                                                  #
# Make sure the path to dump1090.db is correct.                              #
#----------------------------------------------------------------------------#
TypesDB "$SNAP/usr/share/graphs1090/dump1090.db" "$SNAP/usr/share/collectd/types.db"
#----------------------------------------------------------------------------#
# Interval at which to query values. This may be overwritten on a per-plugin #
# base by using the 'Interval' option of the LoadPlugin block:               #
#   <LoadPlugin foo>                                                         #
#       Interval 60                                                          #
#   </LoadPlugin>                                                            #
#----------------------------------------------------------------------------#
Interval 60
Timeout 2
ReadThreads 5
WriteThreads 1
##############################################################################
# Logging                                                                    #
##############################################################################
#LoadPlugin syslog
#<Plugin syslog>
#	LogLevel info
#</Plugin>
LoadPlugin logfile
<Plugin logfile>
	LogLevel info
	File "$LOGFILE"
</Plugin>
##############################################################################
# LoadPlugin section                                                         #
#----------------------------------------------------------------------------#
# Specify what features to activate.                                         #
##############################################################################
LoadPlugin rrdtool
LoadPlugin table
LoadPlugin interface
LoadPlugin memory
LoadPlugin cpu
LoadPlugin aggregation
LoadPlugin match_regex
LoadPlugin df
LoadPlugin disk
<LoadPlugin python>
	Globals true
</LoadPlugin>
##############################################################################
# Plugin configuration                                                       #
##############################################################################
<Plugin rrdtool>
	DataDir "$RRDDIR"
	CacheFlush $RRD_CACHE_FLUSH
	CacheTimeout $RRD_CACHE_TIMEOUT
	WritesPerSecond $RRD_WRITES_PER_SECOND
	RandomTimeout $RRD_RANDOM_TIMEOUT
	RRARows 3000
	RRATimespan 174000
	RRATimespan 696000
	RRATimespan 2784000
	RRATimespan 16008000
	RRATimespan 96048000
	XFF 0.8
</Plugin>
#----------------------------------------------------------------------------#
# Configure the dump1090 python module.                                      #
#                                                                            #
# Each Instance block collects statistics from a separate named dump1090.    #
# The URL should be the base URL of the webmap, i.e. in the examples below,  #
# statistics will be loaded from http://localhost/dump1090/data/stats.json   #
#----------------------------------------------------------------------------#
<Plugin python>
	ModulePath "$SNAP/usr/share/graphs1090"
	LogTraces true
	Interactive false
	Import "dump1090"
	<Module dump1090>
		<Instance localhost>
			URL "$URL_1090"
			URL_978 "$URL_978"
		</Instance>
	</Module>
	Import "system_stats"
	<Module system_stats>
		placeholder "true"
	</Module>
</Plugin>
<Plugin table>
	<Table "/sys/class/thermal/thermal_zone0/temp">
		Instance localhost
		Separator " "
		<Result>
			Type gauge
			InstancePrefix "cpu_temp"
			ValuesFrom 0
		</Result>
	</Table>
</Plugin>
<Plugin "interface">
	Interface "eth0"
	Interface "wlan0"
</Plugin>
<Plugin "aggregation">
	<Aggregation>
		Plugin "cpu"
		Type "cpu"
		GroupBy "Host"
		GroupBy "TypeInstance"
		CalculateAverage true
	</Aggregation>
</Plugin>
<Plugin "df">
	MountPoint "$MOUNTPOINT"
	IgnoreSelected false
#	ReportReserved true
	ReportInodes true
</Plugin>
<Plugin "disk">
	Disk "$DISK"
	IgnoreSelected false
</Plugin>
<Chain "PostCache">
	<Rule>
		<Match regex>
			Plugin "^cpu\$"
			PluginInstance "^[0-9]+\$"
		</Match>
		<Target write>
			Plugin "aggregation"
		</Target>
		Target stop
	</Rule>
	Target "write"
</Chain>
EOF

chmod 0600 "$CONF"

# rotate logs
if [ -f "$LOGFILE" ] && [ "$(stat -c "%s" "$LOGFILE")" -gt 67108864 ]; then
	gzip -c "$LOGFILE" > "$LOGFILE.1.gz.tmp"
	mv "$LOGFILE.1.gz.tmp" "$LOGFILE.1.gz"
	cat /dev/null > "$LOGFILE"
fi

# workaround for collectd bug (LP: #1872281)
LD_PRELOAD=$SNAP/usr/lib/python3.8/config-3.8-x86_64-linux-gnu/libpython3.8.so \
	$BIN -f -C "$CONF" -P "$PIDFILE"
